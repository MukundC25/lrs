SMART LIFESTYLE & LEARNING RECOMMENDER
Run Instructions & Setup Guide

================================================================================
SYSTEM REQUIREMENTS
================================================================================

- Python 3.10 or higher
- Node.js 18 or higher
- npm or yarn package manager
- Git (for cloning)
- 4GB RAM minimum
- 2GB free disk space

================================================================================
QUICK START (RECOMMENDED)
================================================================================

1. EXTRACT THE PROJECT
   - Extract the source_code folder to your desired location
   - Open terminal/command prompt in the project root directory

2. BACKEND SETUP (Port 7017)
   cd backend
   python -m pip install -r requirements.txt
   uvicorn app:app --host 0.0.0.0 --port 7017 --reload

3. FRONTEND SETUP (Port 3006) - Open NEW terminal window
   cd frontend
   npm install
   PORT=3006 npm run dev

4. ACCESS THE APPLICATION
   - Frontend: http://localhost:3006
   - Backend API: http://localhost:7017
   - API Documentation: http://localhost:7017/docs

================================================================================
ALTERNATIVE: DOCKER SETUP (EASIER)
================================================================================

If you have Docker installed:

1. NAVIGATE TO PROJECT ROOT
   cd [project-directory]

2. BUILD AND RUN WITH DOCKER COMPOSE
   docker-compose up --build

3. ACCESS THE APPLICATION
   - Frontend: http://localhost:3006
   - Backend API: http://localhost:7017

================================================================================
DETAILED SETUP INSTRUCTIONS
================================================================================

BACKEND SETUP (Python/FastAPI):
-------------------------------

1. Navigate to backend directory:
   cd backend

2. Create virtual environment (recommended):
   python -m venv venv
   
   # On Windows:
   venv\Scripts\activate
   
   # On macOS/Linux:
   source venv/bin/activate

3. Install dependencies:
   pip install -r requirements.txt

4. Start the backend server:
   uvicorn app:app --host 0.0.0.0 --port 7017 --reload

   The backend will be available at: http://localhost:7017

FRONTEND SETUP (Next.js/React):
-------------------------------

1. Open a NEW terminal window/tab

2. Navigate to frontend directory:
   cd frontend

3. Install dependencies:
   npm install
   # OR if you prefer yarn:
   yarn install

4. Start the development server:
   PORT=3006 npm run dev
   # OR with yarn:
   PORT=3006 yarn dev

   The frontend will be available at: http://localhost:3006

================================================================================
PORT CONFIGURATION
================================================================================

DEFAULT PORTS:
- Backend API: 7017
- Frontend: 3006
- Storybook (if enabled): 6009

CHANGING PORTS:
If these ports are already in use, you can modify them:

Backend Port:
- Edit backend/.env file (create if doesn't exist)
- Add: BACKEND_PORT=8000 (or your preferred port)
- Update frontend/next.config.js NEXT_PUBLIC_API_URL accordingly

Frontend Port:
- Use: PORT=3001 npm run dev (replace 3001 with desired port)
- OR edit package.json scripts section

================================================================================
ENVIRONMENT CONFIGURATION
================================================================================

BACKEND ENVIRONMENT (.env file in backend directory):
BACKEND_PORT=7017
ALLOWED_ORIGINS=http://localhost:3006
DATABASE_URL=sqlite:///./feedback.db
LOG_LEVEL=INFO

FRONTEND ENVIRONMENT:
The frontend automatically connects to http://localhost:7017
If you change the backend port, update frontend/next.config.js

================================================================================
TESTING THE APPLICATION
================================================================================

BACKEND TESTS:
cd backend
pytest

FRONTEND TESTS:
cd frontend
npm test

LINTING:
Backend: cd backend && ruff check . && black .
Frontend: cd frontend && npm run lint

================================================================================
TROUBLESHOOTING
================================================================================

COMMON ISSUES:

1. PORT ALREADY IN USE:
   Error: "Port 7017 is already in use"
   Solution: Kill the process using the port or change the port number

2. PYTHON DEPENDENCIES FAIL:
   Error: "Failed to install scikit-surprise"
   Solution: This is optional. The app will work with content-based recommendations only.

3. NODE MODULES ISSUES:
   Error: "Module not found"
   Solution: Delete node_modules folder and package-lock.json, then run npm install again

4. CORS ERRORS:
   Error: "CORS policy blocked"
   Solution: Ensure backend is running on port 7017 and frontend on 3006

5. DATABASE ISSUES:
   Error: "Database connection failed"
   Solution: The SQLite database is created automatically. Ensure write permissions in backend directory.

================================================================================
FEATURES TO TEST
================================================================================

1. MOOD SELECTION:
   - Try all 5 mood options: energized, calm, stressed, happy, tired
   - Notice how recommendations change based on mood

2. TIME CONSTRAINTS:
   - Test different time slots: 5, 10, 30, 60, 120 minutes
   - Verify recommendations fit within time limits

3. INTEREST AREAS:
   - Toggle between lifestyle, learning, or both
   - See how domain focus changes

4. FEEDBACK SYSTEM:
   - Use like/dislike buttons on recommendations
   - Check that feedback is recorded (backend logs)

5. RESPONSIVE DESIGN:
   - Test on different screen sizes
   - Verify mobile compatibility

6. API ENDPOINTS:
   - Visit http://localhost:7017/docs for interactive API documentation
   - Test health check: http://localhost:7017/api/health

================================================================================
DATA SOURCES
================================================================================

The application uses three CSV datasets located in backend/data/:

- workouts.csv: 30+ fitness routines with mood tags and durations
- recipes.csv: 25+ healthy recipes with preparation times
- courses.csv: 30+ micro-learning modules with skill tags

All data is included in the source code. No external API keys required.

================================================================================
PERFORMANCE EXPECTATIONS
================================================================================

- Initial startup: 10-30 seconds (dependency loading)
- Recommendation generation: <200ms
- Page load times: <2 seconds
- Memory usage: ~500MB total (both services)

================================================================================
STOPPING THE APPLICATION
================================================================================

MANUAL STOP:
- Press Ctrl+C in both terminal windows (backend and frontend)

DOCKER STOP:
- Press Ctrl+C in the docker-compose terminal
- OR run: docker-compose down

================================================================================
ADDITIONAL NOTES
================================================================================

1. The application works offline with demo data - no internet required for core functionality

2. User feedback is stored in a local SQLite database (backend/feedback.db)

3. The system includes comprehensive error handling and graceful fallbacks

4. All images are served from Unsplash CDN or local fallbacks

5. The application is production-ready with proper logging, health checks, and monitoring

6. Code is well-documented with type hints and comprehensive comments

================================================================================
SUPPORT
================================================================================

If you encounter any issues:

1. Check the terminal output for error messages
2. Verify all dependencies are installed correctly
3. Ensure ports 7017 and 3006 are available
4. Check the troubleshooting section above
5. Review the README.md file in the source code for additional details

The application has been tested on Windows, macOS, and Linux environments.

================================================================================
DEMO CREDENTIALS
================================================================================

No login required - the application works immediately upon startup.
Simply navigate to http://localhost:3006 and start exploring!

================================================================================
